<pre class=metadata>
Title: ASIMOV Program Patterns Specification (PPS)
Shortname: program-patterns
Level: none
Status: LS
URL: https://asimov-specs.github.io/program-patterns/
Editor: Arto Bendiken, ASIMOV Systems https://asimov.systems, arto@asimov.systems
Repository: asimov-specs/asimov-specs
Abstract: Establishes standardized programming patterns and best practices for developing robust and maintainable ASIMOV software components.
Markup Shorthands: css no, markdown yes
Ignored Terms: h1, h2, h3, h4, h5, h6, xmp
Default Highlight: yaml
</pre>

<pre class=link-defaults>
spec:html; type:element;
    text:a
    text:script
    text:style
    text:title
    text:link
spec:bikeshed-1; type:dfn; for:railroad; text:optional
</pre>

Introduction {#introduction}
============================

The [[ASIMOV]] Platform is a polyglot development platform for trustworthy,
neurosymbolic AI.

This specification establishes standardized programming patterns and best
practices for developing robust and maintainable ASIMOV software components.

Examples {#examples}
====================

Patterns {#patterns}
====================

<table class="data">
  <thead>
    <tr>
      <th align="left">Name</th>
      <th align="left">Summary</th>
      <th align="left">Input</th>
      <th align="left">Arity</th>
      <th align="left">Output</th>
      <th align="left">Arity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left"><dfn>Adapter</dfn></td>
      <td align="left">RDF dataset proxy.</td>
      <td align="left">SPARQL</td>
      <td align="left">1</td>
      <td align="left">RDF</td>
      <td align="left">N</td>
    </tr>
    <tr>
      <td align="left"><dfn>Cataloger</dfn></td>
      <td align="left">Directory iterator.</td>
      <td align="left">URL</td>
      <td align="left">1</td>
      <td align="left">RDF</td>
      <td align="left">N</td>
    </tr>
    <tr>
      <td align="left"><dfn>Emitter</dfn></td>
      <td align="left">Value generator.</td>
      <td align="left">-</td>
      <td align="left">0</td>
      <td align="left">RDF</td>
      <td align="left">N</td>
    </tr>
    <tr>
      <td align="left"><dfn>Fetcher</dfn></td>
      <td align="left">URL protocol client.</td>
      <td align="left">URL</td>
      <td align="left">1</td>
      <td align="left">RDF</td>
      <td align="left">1</td>
    </tr>
    <tr>
      <td align="left"><dfn>Prompter</dfn></td>
      <td align="left">LLM inference provider.</td>
      <td align="left">text</td>
      <td align="left">1</td>
      <td align="left">text</td>
      <td align="left">1</td>
    </tr>
    <tr>
      <td align="left"><dfn>Reader</dfn></td>
      <td align="left">RDF dataset importer.</td>
      <td align="left">any</td>
      <td align="left">1</td>
      <td align="left">RDF</td>
      <td align="left">N</td>
    </tr>
    <tr>
      <td align="left"><dfn>Reasoner</dfn></td>
      <td align="left">RDF dataset entailer.</td>
      <td align="left">RDF</td>
      <td align="left">N</td>
      <td align="left">RDF</td>
      <td align="left">N</td>
    </tr>
    <tr>
      <td align="left"><dfn>Resolver</dfn></td>
      <td align="left">URI resolver.</td>
      <td align="left">URI</td>
      <td align="left">1</td>
      <td align="left">URL</td>
      <td align="left">N</td>
    </tr>
    <tr>
      <td align="left"><dfn>Runner</dfn></td>
      <td align="left">Language runtime engine.</td>
      <td align="left">any</td>
      <td align="left">1</td>
      <td align="left">text</td>
      <td align="left">1</td>
    </tr>
    <tr>
      <td align="left"><dfn>Writer</dfn></td>
      <td align="left">RDF dataset exporter.</td>
      <td align="left">RDF</td>
      <td align="left">N</td>
      <td align="left">any</td>
      <td align="left">1</td>
    </tr>
  </tbody>
</table>

## Adapter ## {#adapter}

RDF dataset proxy. Consumes SPARQL input, produces RDF output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`QUERY-FILE`</td>
      <td align="left">1</td>
      <td align="left">`-` (`/dev/stdin`)</td>
      <td align="left">The SPARQL query file path.</td>
    </tr>
  </tbody>
</table>

### Options ### {#adapter-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--output=FORMAT`</td>
      <td align="left">`-o`</td>
      <td align="left">`jsonld`</td>
      <td align="left">The output format.</td>
    </tr>
  </tbody>
</table>

## Cataloger ## {#cataloger}

Directory iterator. Takes a URL input, produces RDF output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`INPUT-URL`</td>
      <td align="left">1</td>
      <td align="left">none</td>
      <td align="left">The input URL.</td>
    </tr>
  </tbody>
</table>

### Options ### {#cataloger-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--limit=COUNT`</td>
      <td align="left">`-n`</td>
      <td align="left">none</td>
      <td align="left">The maximum number of outputs.</td>
    </tr>
    <tr>
      <td align="left">`--output=FORMAT`</td>
      <td align="left">`-o`</td>
      <td align="left">`jsonld`</td>
      <td align="left">The output format.</td>
    </tr>
  </tbody>
</table>

## Emitter ## {#emitter}

Value generator. Produces an RDF output.

### Arguments ### {#writer-arguments}

Emitters require no positional arguments.

### Options ### {#emitter-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--output=FORMAT`</td>
      <td align="left">`-o`</td>
      <td align="left">`jsonld`</td>
      <td align="left">The output format.</td>
    </tr>
  </tbody>
</table>

## Fetcher ## {#fetcher}

URL protocol fetcher. Consumes a URL input, produces RDF output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`INPUT-URL`</td>
      <td align="left">1</td>
      <td align="left">none</td>
      <td align="left">The input URL.</td>
    </tr>
  </tbody>
</table>

### Options ### {#fetcher-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--output=FORMAT`</td>
      <td align="left">`-o`</td>
      <td align="left">`jsonld`</td>
      <td align="left">The output format.</td>
    </tr>
  </tbody>
</table>

## Prompter ## {#prompter}

LLM inference provider. Consumes prompt input, produces response output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`INPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdin`)</td>
      <td align="left">The input file path.</td>
    </tr>
    <tr>
      <td align="left">`OUTPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdout`)</td>
      <td align="left">The output file path.</td>
    </tr>
  </tbody>
</table>

### Options ### {#prompter-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--input=FORMAT`</td>
      <td align="left">`-i`</td>
      <td align="left">`text`</td>
      <td align="left">The input format.</td>
    </tr>
    <tr>
      <td align="left">`--model=MODEL`</td>
      <td align="left">`-m`</td>
      <td align="left">`auto`</td>
      <td align="left">The inference model.</td>
    </tr>
    <tr>
      <td align="left">`--output=FORMAT`</td>
      <td align="left">`-o`</td>
      <td align="left">`text`</td>
      <td align="left">The output format.</td>
    </tr>
  </tbody>
</table>

## Reader ## {#reader}

RDF dataset importer. Consumes some input, produces RDF output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`INPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdin`)</td>
      <td align="left">The input file path.</td>
    </tr>
    <tr>
      <td align="left">`OUTPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdout`)</td>
      <td align="left">The output file path.</td>
    </tr>
  </tbody>
</table>

### Options ### {#reader-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--input=FORMAT`</td>
      <td align="left">`-i`</td>
      <td align="left">`auto`</td>
      <td align="left">The input format.</td>
    </tr>
    <tr>
      <td align="left">`--output=FORMAT`</td>
      <td align="left">`-o`</td>
      <td align="left">`jsonld`</td>
      <td align="left">The output format.</td>
    </tr>
  </tbody>
</table>

## Reasoner ## {#reasoner}

RDF dataset entailer. Consumes RDF input, produces entailed RDF output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`INPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdin`)</td>
      <td align="left">The input file path.</td>
    </tr>
    <tr>
      <td align="left">`OUTPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdout`)</td>
      <td align="left">The output file path.</td>
    </tr>
  </tbody>
</table>

### Options ### {#reasoner-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--input=FORMAT`</td>
      <td align="left">`-i`</td>
      <td align="left">`auto`</td>
      <td align="left">The input format.</td>
    </tr>
    <tr>
      <td align="left">`--output=FORMAT`</td>
      <td align="left">`-o`</td>
      <td align="left">`jsonld`</td>
      <td align="left">The output format.</td>
    </tr>
  </tbody>
</table>

## Resolver ## {#resolver}

URI resolver. Takes a URI (that is, URN or URL) input, produces a resolved URL
output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`INPUT-URL`</td>
      <td align="left">0..1</td>
      <td align="left">none</td>
      <td align="left">The input URL.</td>
    </tr>
  </tbody>
</table>

### Options ### {#resolver-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--limit=COUNT`</td>
      <td align="left">`-n`</td>
      <td align="left">none</td>
      <td align="left">The maximum number of outputs.</td>
    </tr>
  </tbody>
</table>

## Runner ## {#runner}

Language runtime engine. Consumes text input conforming to a grammar, executes
it, and produces the execution result as output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`INPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdin`)</td>
      <td align="left">The input file path.</td>
    </tr>
  </tbody>
</table>

### Options ### {#runner-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--define=VAR=VAL`</td>
      <td align="left">`-D`</td>
      <td align="left">none</td>
      <td align="left">A key/value definition.</td>
    </tr>
  </tbody>
</table>

## Writer ## {#writer}

RDF dataset exporter. Consumes RDF input, produces some output.

### Arguments ### {#writer-arguments}

<table class="data">
  <thead>
    <tr>
      <th align="left">Argument</th>
      <th align="left">Arity</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`INPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdin`)</td>
      <td align="left">The input file path.</td>
    </tr>
    <tr>
      <td align="left">`OUTPUT-FILE`</td>
      <td align="left">0..1</td>
      <td align="left">`-` (`/dev/stdout`)</td>
      <td align="left">The output file path.</td>
    </tr>
  </tbody>
</table>

### Options ### {#writer-options}

<table class="data">
  <thead>
    <tr>
      <th align="left">Option</th>
      <th align="left">Flag</th>
      <th align="left">Default</th>
      <th align="left">Summary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">`--input=FORMAT`</td>
      <td align="left">`-i`</td>
      <td align="left">`auto`</td>
      <td align="left">The input format.</td>
    </tr>
    <tr>
      <td align="left">`--output=FORMAT`</td>
      <td align="left">`-o`</td>
      <td align="left">`auto`</td>
      <td align="left">The output format.</td>
    </tr>
  </tbody>
</table>

RDF Mapping {#rdf-mapping}
==========================

Security Considerations {#security}
===================================

IANA Considerations {#iana}
===========================

This specification does not require any IANA registrations.

Acknowledgments {#acknowledgments}
==================================

The editors would like to thank the ASIMOV Platform community for their contributions and feedback during the development of this specification.

<pre class=biblio>
{
  "ASIMOV": {
    "title": "ASIMOV Platform Documentation",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov.sh",
    "deliveredBy": [
      "https://github.com/asimov-platform"
    ]
  },
  "ASIMOV-MCS": {
    "title": "ASIMOV Module Concepts Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/module-concepts/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-MMS": {
    "title": "ASIMOV Module Manifest Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/module-manifest/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-MPS": {
    "title": "ASIMOV Module Packaging Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/module-packaging/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-MRS": {
    "title": "ASIMOV Module Resolution Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken",
      "Samuel Sarle"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/module-resolution/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-PPS": {
    "title": "ASIMOV Program Patterns Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/program-patterns/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-SDS": {
    "title": "ASIMOV State Directory Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/state-directory/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "YAML-LD": {
    "title": "YAML-LD",
    "authors": ["Gregg Kellogg"],
    "href": "https://json-ld.github.io/yaml-ld/spec/",
    "status": "Draft Community Group Report"
  }
}
</pre>

Changes {#changes}
==================

This section will document changes between versions of this specification.
