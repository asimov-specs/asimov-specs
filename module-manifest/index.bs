<pre class=metadata>
Title: ASIMOV Module Manifest Specification (MMS)
Shortname: module-manifest
Level: 1
Status: LS
URL: https://asimov-specs.github.io/module-manifest/
Editor: Arto Bendiken, ASIMOV Systems https://asimov.systems, arto@asimov.systems
Repository: asimov-specs/asimov-specs
Abstract: This specification defines the ASIMOV Module Manifest format, a YAML-based declarative format for describing ASIMOV Platform modules. Module manifests provide metadata about modules including their capabilities, dependencies, and the resources they handle. This enables the ASIMOV Platform to automatically discover, configure, and orchestrate modules based on their declared capabilities.
Markup Shorthands: css no, markdown yes
Ignored Terms: h1, h2, h3, h4, h5, h6, xmp
Default Highlight: yaml
</pre>

<pre class=link-defaults>
spec:html; type:element;
    text:a
    text:script
    text:style
    text:title
    text:link
spec:bikeshed-1; type:dfn; for:railroad; text:optional
</pre>

Introduction {#introduction}
============================

## Overview ## {#overview}

The ASIMOV Module Manifest Specification defines a standardized format for declaring module metadata, capabilities, and requirements within the ASIMOV Platform ecosystem. Module manifests enable:

- **Automatic Discovery**: Modules can be automatically discovered and registered based on their manifest declarations
- **Capability Advertisement**: Modules declare what programs they provide and what resources they can handle
- **Dependency Resolution**: The platform can resolve module dependencies and ensure required capabilities are available
- **Configuration Management**: Manifests provide a single source of truth for module configuration

## Scope ## {#scope}

This specification covers:

- The syntax and structure of module manifest files
- Required and optional manifest fields
- Validation rules and constraints
- Processing model for manifest interpretation

This specification does not cover:

- The runtime behavior of modules
- Inter-module communication protocols
- Platform-specific implementation details

## Conformance ## {#spec-conformance}

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [[RFC2119]].

A conforming module manifest is one that satisfies all the requirements defined in this specification.

A conforming manifest processor is one that correctly interprets module manifests according to the processing model defined in this specification.

Manifest Structure {#structure}
===============================

## File Format ## {#file-format}

Module manifests MUST be written in YAML 1.2 format [[YAML]]. The manifest file MUST be named `module.yaml` and placed in the `.asimov` directory in the root of the module repository (i.e., `.asimov/module.yaml`).

The manifest MUST begin with a YAML document separator (`---`) and MAY include the following comment referencing this specification:

```yaml
# See: https://asimov-specs.github.io/module-manifest/
---
```

## Top-Level Fields ## {#top-level-fields}

A module manifest consists of the following top-level fields:

<table class="data">
  <thead>
    <tr>
      <th align="left">Field</th>
      <th align="left">Type</th>
      <th align="left">Required</th>
      <th align="left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left"><dfn>name</dfn></td>
      <td align="left">string</td>
      <td align="left">REQUIRED</td>
      <td align="left">The unique identifier for the module</td>
    </tr>
    <tr>
      <td align="left"><dfn>label</dfn></td>
      <td align="left">string</td>
      <td align="left">OPTIONAL</td>
      <td align="left">A human-readable display name for the module</td>
    </tr>
    <tr>
      <td align="left"><dfn>summary</dfn></td>
      <td align="left">string</td>
      <td align="left">OPTIONAL</td>
      <td align="left">A brief description of the module's purpose</td>
    </tr>
    <tr>
      <td align="left"><dfn>links</dfn></td>
      <td align="left">array&lt;string&gt;</td>
      <td align="left">OPTIONAL</td>
      <td align="left">URLs to related resources (homepage, repository, documentation)</td>
    </tr>
    <tr>
      <td align="left"><dfn>provides</dfn></td>
      <td align="left">object</td>
      <td align="left">OPTIONAL</td>
      <td align="left">Capabilities provided by the module</td>
    </tr>
    <tr>
      <td align="left"><dfn>handles</dfn></td>
      <td align="left">object</td>
      <td align="left">OPTIONAL</td>
      <td align="left">Resource types handled by the module</td>
    </tr>
  </tbody>
</table>

## The name Field ## {#name-field}

The <a>name</a> field MUST contain a string that uniquely identifies the module within the ASIMOV Platform. The name:

- MUST consist only of lowercase letters, digits, and hyphens
- MUST start with a letter
- MUST NOT exceed 64 characters in length
- SHOULD be descriptive and follow the pattern `category-provider-type` (e.g., `search-google-fetcher`)

## The label Field ## {#label-field}

The <a>label</a> field contains an optional human-readable display name for the module. If provided, it SHOULD be concise and suitable for display in user interfaces.

## The summary Field ## {#summary-field}

The <a>summary</a> field contains an optional brief description of the module's purpose and functionality. This SHOULD be a single sentence that clearly explains what the module does.

## The links Field ## {#links-field}

The <a>links</a> field contains an optional array of URLs pointing to resources related to the module, such as:

- The module's homepage
- Source code repository
- Documentation
- Package registry entries

All URLs in this array MUST be well-formed and use HTTPS where applicable.

## The provides Section ## {#provides-section}

The <a>provides</a> section declares the capabilities that a module makes available to the platform. Currently, the following capability types are defined:

### programs ### {#programs}

The `programs` field contains an array of executable program names that the module provides. These programs:

- MUST follow the naming convention `asimov-{module}-{function}`
- MUST be executable files or scripts included with the module
- SHOULD implement well-defined interfaces for their function type as specified in [[ASIMOV-PPS]]

The function types (e.g., fetcher, importer, emitter, processor) are defined in the ASIMOV Program Patterns Specification.

Example:
```yaml
provides:
  programs:
    - asimov-serpapi-fetcher
    - asimov-serpapi-importer
```

## The handles Section ## {#handles-section}

The <a>handles</a> section declares what types of resources or inputs the module can process. Multiple handler types can be specified:

### url_protocols ### {#url-protocols}

An array of URL protocol schemes (without the trailing colon) that the module can handle.

Example:
```yaml
handles:
  url_protocols:
    - near
    - ipfs
```

### url_prefixes ### {#url-prefixes}

An array of URL prefixes that the module can handle. These MUST be complete URLs including the protocol scheme.

Example:
```yaml
handles:
  url_prefixes:
    - https://amazon.com/
    - https://ebay.com/itm/
```

### url_patterns ### {#url-patterns}

An array of URL patterns with parameter placeholders that the module can handle. Patterns MUST conform to the syntax defined in [[URLPATTERN]].

Example:
```yaml
handles:
  url_patterns:
    - https://google.com/search?q=:query
    - https://x.com/:account/followers
```

### file_extensions ### {#file-extensions}

An array of file extensions (including the leading dot) that the module can process. File extensions SHOULD be registered with IANA as specified in [[RFC6838]] or be well-established conventional extensions.

Example:
```yaml
handles:
  file_extensions:
    - .csv
    - .xlsx
```

### content_types ### {#content-types}

An array of MIME content types that the module can process. Content types MUST be formatted according to [[RFC2046]] and SHOULD be registered in the IANA Media Types registry [[IANA-MEDIA-TYPES]].

Example:
```yaml
handles:
  content_types:
    - application/json
    - text/csv
```

Examples {#examples}
====================

## Basic Module Manifest ## {#basic-example}

A minimal module manifest for a template module:

```yaml
# See: https://asimov-specs.github.io/module-manifest/
---
name: template
label: Template
summary: Fork this to create your own module!
links:
  - https://github.com/asimov-modules/asimov-template-module
  - https://crates.io/crates/asimov-template-module

provides:
  programs:
    - asimov-template-emitter

handles:
  url_protocols:
  url_prefixes:
  url_patterns:
  file_extensions:
  content_types:
```

## Search API Module ## {#search-api-example}

A module that provides search capabilities through multiple search engines:

```yaml
---
name: serpapi
label: SerpAPI Search
summary: Provides search results from multiple search engines via SerpAPI
links:
  - https://serpapi.com
  - https://github.com/asimov-modules/asimov-serpapi-module

provides:
  programs:
    - asimov-serpapi-fetcher
    - asimov-serpapi-importer

handles:
  url_patterns:
    - https://bing.com/search?q=:query
    - https://duckduckgo.com/?q=:query
    - https://google.com/search?q=:query
    - https://baidu.com/s?wd=:query
```

## Social Media Scraper Module ## {#social-media-example}

A module that handles various social media platforms:

```yaml
---
name: brightdata
label: Bright Data Scraper
summary: Web scraping for e-commerce and social media platforms
links:
  - https://brightdata.com
  - https://github.com/asimov-modules/asimov-brightdata-module

provides:
  programs:
    - asimov-brightdata-fetcher
    - asimov-brightdata-importer
    - asimov-brightdata-analyzer

handles:
  url_prefixes:
    - https://facebook.com/events/
    - https://facebook.com/groups/
    - https://facebook.com/marketplace/item/
    - https://instagram.com/
    - https://instagram.com/p/
    - https://instagram.com/reel/
    - https://linkedin.com/company/
    - https://linkedin.com/in/
    - https://x.com/
    - https://youtube.com/@
    - https://youtube.com/watch?v=
```

## Blockchain Module ## {#blockchain-example}

A module that handles blockchain protocols:

```yaml
---
name: near
label: NEAR Protocol
summary: Integration with the NEAR blockchain ecosystem
links:
  - https://near.org
  - https://github.com/asimov-modules/asimov-near-module

provides:
  programs:
    - asimov-near-fetcher
    - asimov-near-validator
    - asimov-near-signer

handles:
  url_protocols:
    - near
  url_patterns:
    - https://explorer.near.org/accounts/:account
    - https://explorer.near.org/transactions/:txhash
```

Processing Model {#processing}
==============================

## Discovery ## {#discovery}

The ASIMOV Platform discovers modules by:

1. Scanning designated module directories for `.asimov/module.yaml` files
2. Validating each manifest according to this specification
3. Registering valid modules in the platform's module registry

## Validation ## {#validation}

A manifest processor MUST validate that:

1. The manifest is valid YAML 1.2
2. All required fields are present
3. Field values conform to their specified types
4. The `name` field meets the naming requirements
5. All URLs in the `links` field are well-formed
6. Program names in `provides.programs` follow the naming convention
7. URL prefixes and patterns in the `handles` section are well-formed

## Conflict Resolution ## {#conflicts}

When multiple modules declare handlers for overlapping resources:

1. More specific handlers take precedence over less specific ones
2. `url_patterns` take precedence over `url_prefixes`
3. `url_prefixes` take precedence over `url_protocols`
4. For equal specificity, the platform MAY use additional criteria (e.g., module priority, user preference)

## Runtime Behavior ## {#runtime}

When the platform needs to handle a resource:

1. It queries the module registry for modules that handle the resource type
2. It selects the most appropriate module based on the conflict resolution rules
3. It invokes the appropriate program from the module's `provides.programs` list
4. The program processes the resource and returns results in the expected format

RDF Mapping {#rdf-mapping}
==========================

Module manifests can be mapped to RDF using YAML-LD [[YAML-LD]] or JSON-LD [[JSON-LD]]. This enables integration with linked data systems and semantic web technologies.

## Vocabulary ## {#rdf-vocabulary}

This specification defines the following RDF vocabulary with the base IRI `https://asimov-specs.github.io/module-manifest/`:

<table class="data">
  <thead>
    <tr>
      <th align="left">Prefix</th>
      <th align="left">Namespace IRI</th>
      </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left"><code>mms:</code></td>
      <td align="left"><code>https://asimov-specs.github.io/module-manifest/</code></td>
    </tr>
    <tr>
      <td align="left"><code>rdf:</code></td>
      <td align="left"><code>http://www.w3.org/1999/02/22-rdf-syntax-ns#</code></td>
    </tr>
    <tr>
      <td align="left"><code>rdfs:</code></td>
      <td align="left"><code>http://www.w3.org/2000/01/rdf-schema#</code></td>
    </tr>
    <tr>
      <td align="left"><code>xsd:</code></td>
      <td align="left"><code>http://www.w3.org/2001/XMLSchema#</code></td>
    </tr>
  </tbody>
</table>

## Type Mappings ## {#rdf-types}

The following RDF types are defined:

- `mms:Module` - The class of ASIMOV modules
- `mms:Program` - The class of executable programs
- `mms:Handler` - The class of resource handlers

## Property Mappings ## {#rdf-properties}

Module manifest fields map to RDF properties as follows:

<table class="data">
  <thead>
    <tr>
      <th align="left">YAML Field</th>
      <th align="left">RDF Property</th>
      <th align="left">Range</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left"><code>name</code></td>
      <td align="left"><code>mms:name</code></td>
      <td align="left"><code>xsd:string</code></td>
    </tr>
    <tr>
      <td align="left"><code>label</code></td>
      <td align="left"><code>rdfs:label</code></td>
      <td align="left"><code>xsd:string</code></td>
    </tr>
    <tr>
      <td align="left"><code>summary</code></td>
      <td align="left"><code>rdfs:comment</code></td>
      <td align="left"><code>xsd:string</code></td>
    </tr>
    <tr>
      <td align="left"><code>links</code></td>
      <td align="left"><code>rdfs:seeAlso</code></td>
      <td align="left"><code>xsd:anyURI</code></td>
    </tr>
    <tr>
      <td align="left"><code>provides.programs</code></td>
      <td align="left"><code>mms:providesProgram</code></td>
      <td align="left"><code>mms:Program</code></td>
    </tr>
    <tr>
      <td align="left"><code>handles.url_protocols</code></td>
      <td align="left"><code>mms:handlesProtocol</code></td>
      <td align="left"><code>xsd:string</code></td>
    </tr>
    <tr>
      <td align="left"><code>handles.url_prefixes</code></td>
      <td align="left"><code>mms:handlesPrefix</code></td>
      <td align="left"><code>xsd:anyURI</code></td>
    </tr>
    <tr>
      <td align="left"><code>handles.url_patterns</code></td>
      <td align="left"><code>mms:handlesPattern</code></td>
      <td align="left"><code>xsd:string</code></td>
    </tr>
    <tr>
      <td align="left"><code>handles.file_extensions</code></td>
      <td align="left"><code>mms:handlesExtension</code></td>
      <td align="left"><code>xsd:string</code></td>
    </tr>
    <tr>
      <td align="left"><code>handles.content_types</code></td>
      <td align="left"><code>mms:handlesContentType</code></td>
      <td align="left"><code>xsd:string</code></td>
    </tr>
  </tbody>
</table>

## JSON-LD Context ## {#jsonld-context}

The following JSON-LD context SHOULD be used when converting module manifests to JSON-LD:

```json
{
  "@context": {
    "@vocab": "https://asimov-specs.github.io/module-manifest/",
    "mms": "https://asimov-specs.github.io/module-manifest/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",

    "name": "mms:name",
    "label": "rdfs:label",
    "summary": "rdfs:comment",
    "links": {
      "@id": "rdfs:seeAlso",
      "@type": "@id"
    },
    "provides": "mms:provides",
    "programs": {
      "@id": "mms:providesProgram",
      "@container": "@set"
    },
    "handles": "mms:handles",
    "url_protocols": {
      "@id": "mms:handlesProtocol",
      "@container": "@set"
    },
    "url_prefixes": {
      "@id": "mms:handlesPrefix",
      "@type": "@id",
      "@container": "@set"
    },
    "url_patterns": {
      "@id": "mms:handlesPattern",
      "@container": "@set"
    },
    "file_extensions": {
      "@id": "mms:handlesExtension",
      "@container": "@set"
    },
    "content_types": {
      "@id": "mms:handlesContentType",
      "@container": "@set"
    }
  }
}
```

## Example RDF Mapping ## {#rdf-example}

Given the following module manifest:

```yaml
---
name: serpapi
label: SerpAPI Search
summary: Provides search results via SerpAPI
links:
  - https://serpapi.com

provides:
  programs:
    - asimov-serpapi-fetcher

handles:
  url_patterns:
    - https://google.com/search?q=:query
```

The equivalent RDF representation in Turtle would be:

```turtle
@prefix mms: <https://asimov-specs.github.io/module-manifest/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

[] a mms:Module ;
   mms:name "serpapi" ;
   rdfs:label "SerpAPI Search" ;
   rdfs:comment "Provides search results via SerpAPI" ;
   rdfs:seeAlso <https://serpapi.com> ;
   mms:providesProgram "asimov-serpapi-fetcher" ;
   mms:handlesPattern "https://google.com/search?q=:query" .
```

Security Considerations {#security}
===================================

## Manifest Validation ## {#manifest-validation}

Implementations MUST:

- Validate all manifest fields before processing
- Reject manifests with malformed data
- Sanitize all string values to prevent injection attacks
- Verify that declared programs actually exist before registration

## Program Execution ## {#program-execution}

When executing programs declared in manifests:

- Programs SHOULD run with minimal required privileges
- The platform SHOULD implement sandboxing or containerization
- Resource limits SHOULD be enforced
- Network access SHOULD be restricted to declared URL patterns

## URL Pattern Matching ## {#url-pattern-matching}

URL pattern matching MUST be implemented carefully to avoid:

- Regular expression denial of service (ReDoS) attacks
- Unbounded memory consumption
- Pattern injection vulnerabilities

IANA Considerations {#iana}
===========================

This specification does not require any IANA registrations.

Acknowledgments {#acknowledgments}
==================================

The editors would like to thank the ASIMOV Platform community for their contributions and feedback during the development of this specification.

<pre class=biblio>
{
  "ASIMOV": {
    "title": "ASIMOV Platform Documentation",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov.sh",
    "deliveredBy": [
      "https://github.com/asimov-platform"
    ]
  },
  "ASIMOV-MCS": {
    "title": "ASIMOV Module Concepts Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/module-concepts/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-MMS": {
    "title": "ASIMOV Module Manifest Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/module-manifest/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-MPS": {
    "title": "ASIMOV Module Packaging Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/module-packaging/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-MRS": {
    "title": "ASIMOV Module Resolution Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken",
      "Samuel Sarle"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/module-resolution/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-PPS": {
    "title": "ASIMOV Program Patterns Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/program-patterns/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "ASIMOV-SDS": {
    "title": "ASIMOV State Directory Specification",
    "publisher": "ASIMOV Systems",
    "authors": [
      "Arto Bendiken"
    ],
    "etAl": true,
    "href": "https://asimov-specs.github.io/state-directory/",
    "deliveredBy": [
      "https://github.com/asimov-specs"
    ]
  },
  "YAML-LD": {
    "title": "YAML-LD",
    "authors": ["Gregg Kellogg"],
    "href": "https://json-ld.github.io/yaml-ld/spec/",
    "status": "Draft Community Group Report"
  }
}
</pre>

Changes {#changes}
==================

This section will document changes between versions of this specification.

## Version 1.0 ## {#v1}

Initial version of the ASIMOV Module Manifest Specification.
